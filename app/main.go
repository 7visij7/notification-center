package main

import (
    "fmt"
    "errors"
	"strings"
    "net/http"
    "github.com/gin-gonic/gin"
    swaggerFiles "github.com/swaggo/files"
    ginSwagger "github.com/swaggo/gin-swagger"
    "git.puls.ru/devops1/sre/notification-center/controller"
	"git.puls.ru/devops1/sre/notification-center/model"
    "git.puls.ru/devops1/sre/notification-center/types"
    _ "git.puls.ru/devops1/sre/notification-center/docs" // docs is generated by Swag CLI, you have to import it.
  )

// @title Devops API.
// @version 1.0
// @description Let's get it started.

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization

// @host notification-center.infra.puls.local
// @BasePath /api/v1
func main() {
    r := gin.Default()

	c := controller.NewController()

	v1 := r.Group("/api/v1")
	{
		v1.Use(auth())
		grafana := v1.Group("/grafana")
		{
			grafana.POST("ecomm", c.GrafanaEcomm)
			grafana.POST("markirovka", c.GrafanaMarkirovka)
			grafana.POST("devops", c.GrafanaDevops)
			grafana.POST("ovs-support", c.GrafanaOVSSupport)
			grafana.POST("markirovka-ktteam", c.GrafanaMarkirovkaKTTeam)
			grafana.POST("ovs-dba", c.GrafanaOVSDBA)
		}
		redash := v1.Group("/redash")
		{
			redash.POST("markirovka", c.RedashMarkirovka)
			redash.POST("devops", c.RedashDevops)
			redash.POST("ovs-support", c.RedashOVSSupport)
		}
		dns := v1.Group("/dns")
		{
			dns.POST("", c.DnsAction)
		}
        telegram := v1.Group("/telegram")
		{
			telegram.POST("ecomm", c.TelegramEcomm)
			telegram.POST("markirovka", c.TelegramMarkirovka)
			telegram.POST("devops", c.TelegramDevops)
		}
	}
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Run(":8080")
}


func auth() gin.HandlerFunc { 
	fmt.Println("auth")
	return func(ctx *gin.Context) {
		authHeader := ctx.GetHeader("Authorization")
		if len(authHeader) == 0 { 
			model.NewError(ctx, http.StatusUnauthorized, errors.New("Authorization is required Header"))
			ctx.Abort()
		}
		user, password, hasAuth := ctx.Request.BasicAuth()
		if (hasAuth && user == types.GrafanaUser && password == types.GrafanaPassword && strings.Contains(ctx.Request.RequestURI, "grafana") == true )  || (authHeader == types.Authorization) {
			ctx.Next()
 		} else if (hasAuth && user == types.RedashUser && password == types.RedashPassword && strings.Contains(ctx.Request.RequestURI, "redash") == true ) {
			ctx.Next()
 		} else {
			model.NewError(ctx, http.StatusUnauthorized, errors.New("Authorization is failed."))
			ctx.Abort()
		}
	}
}
